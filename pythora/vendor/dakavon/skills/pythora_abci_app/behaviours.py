# -*- coding: utf-8 -*-
# ------------------------------------------------------------------------------
#
#   Copyright 2023 
#   Copyright 2023 valory-xyz
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
# ------------------------------------------------------------------------------

"""This package contains a behaviour that autogenerated from the protocol ``."""

import os
from abc import ABC
from typing import Optional, Any
from aea.skills.behaviours import FSMBehaviour, State
from enum import Enum


class PythoraabciappEvents(Enum):
    """Events for the fsm."""
    
    DONE = 'DONE'
    TIMEOUT = 'TIMEOUT'

class PythoraabciappStates(Enum):
    """States for the fsm."""
    
    FETCHPRICEDATAROUND = 'fetchpricedataround'
    CONSUMEPRICEANDPRINTMESSAGEROUND = 'consumepriceandprintmessageround'
    REGISTRATIONROUND = 'registrationround'
    RESETANDPAUSEROUND = 'resetandpauseround'
    UPDATEPRICEDATAROUND = 'updatepricedataround'

class BaseState(State, ABC):
    """Base class for states."""
    _state: PythoraabciappStates = None

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._event = None
        self._is_done = False  # Initially, the state is not done

    def act(self) -> None:
        """Perform the act."""
        print(f"Performing action for state {self._state}")
        self._is_done = True
        self._event = PythoraabciappEvents.DONE

    def is_done(self) -> bool:
        """Is done."""
        return self._is_done

    @property
    def event(self) -> Optional[str]:
        """Current event"""
        return self._event


# Define states
import requests 


class FetchPriceDataRound(BaseState):
    """This class implements the behaviour of the state FetchPriceDataRound."""
    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._state = PythoraabciappStates.FETCHPRICEDATAROUND

    def act(self) -> None:
        """Perform the act."""
        print(f"Performing action for state {self._state}")

        res = requests.get("https://www.google.com")

        self.context.shared_state["data"] = res

        self._is_done = True
        self._event = PythoraabciappEvents.DONE


class ConsumePriceAndPrintMessageRound(BaseState):
    """This class implements the behaviour of the state ConsumePriceAndPrintMessageRound."""
    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._state = PythoraabciappStates.CONSUMEPRICEANDPRINTMESSAGEROUND

    def act(self) -> None:
        """Perform the act."""
        print(f"Performing action for state {self._state}")

        data = self.context.shared_state["data"]
        print(data)

        self._is_done = True
        self._event = PythoraabciappEvents.DONE


class RegistrationRound(BaseState):
    """This class implements the behaviour of the state RegistrationRound."""
    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._state = PythoraabciappStates.REGISTRATIONROUND

    def act(self) -> None:
        """Perform the act."""
        print(f"Performing action for state {self._state}")
        self._is_done = True
        self._event = PythoraabciappEvents.DONE

import time
class ResetAndPauseRound(BaseState):
    """This class implements the behaviour of the state ResetAndPauseRound."""
    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._state = PythoraabciappStates.RESETANDPAUSEROUND

    def act(self) -> None:
        """Perform the act."""
        print(f"Performing action for state {self._state}")
        self._is_done = True
        self._event = PythoraabciappEvents.DONE
        time.sleep(5)

class UpdatePriceDataRound(BaseState):
    """This class implements the behaviour of the state UpdatePriceDataRound."""
    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self._state = PythoraabciappStates.UPDATEPRICEDATAROUND


    def act(self) -> None:
        """Perform the act."""
        print(f"Performing action for state {self._state}")
        self._is_done = True
        self._event = PythoraabciappEvents.DONE


class PythoraabciappFsmBehaviour(FSMBehaviour):
    """This class implements a simple Finite State Machine behaviour."""

    def __init__(self, **kwargs: Any) -> None:
        super().__init__(**kwargs)
        self.register_state(PythoraabciappStates.REGISTRATIONROUND.value, RegistrationRound(**kwargs), True)
        
        
        
        self.register_state(PythoraabciappStates.FETCHPRICEDATAROUND.value, FetchPriceDataRound(**kwargs)) 
        self.register_state(PythoraabciappStates.CONSUMEPRICEANDPRINTMESSAGEROUND.value, ConsumePriceAndPrintMessageRound(**kwargs)) 
        self.register_state(PythoraabciappStates.RESETANDPAUSEROUND.value, ResetAndPauseRound(**kwargs)) 
        self.register_state(PythoraabciappStates.UPDATEPRICEDATAROUND.value, UpdatePriceDataRound(**kwargs)) 
        
        self.register_transition(
            source=PythoraabciappStates.CONSUMEPRICEANDPRINTMESSAGEROUND.value, 
            event=PythoraabciappEvents.DONE,
            destination=PythoraabciappStates.RESETANDPAUSEROUND.value
        )
        self.register_transition(
            source=PythoraabciappStates.FETCHPRICEDATAROUND.value, 
            event=PythoraabciappEvents.DONE,
            destination=PythoraabciappStates.UPDATEPRICEDATAROUND.value
        )
        self.register_transition(
            source=PythoraabciappStates.FETCHPRICEDATAROUND.value, 
            event=PythoraabciappEvents.TIMEOUT,
            destination=PythoraabciappStates.REGISTRATIONROUND.value
        )
        self.register_transition(
            source=PythoraabciappStates.REGISTRATIONROUND.value, 
            event=PythoraabciappEvents.DONE,
            destination=PythoraabciappStates.FETCHPRICEDATAROUND.value
        )
        self.register_transition(
            source=PythoraabciappStates.RESETANDPAUSEROUND.value, 
            event=PythoraabciappEvents.DONE,
            destination=PythoraabciappStates.REGISTRATIONROUND.value
        )
        self.register_transition(
            source=PythoraabciappStates.UPDATEPRICEDATAROUND.value, 
            event=PythoraabciappEvents.DONE,
            destination=PythoraabciappStates.CONSUMEPRICEANDPRINTMESSAGEROUND.value
        )


    def setup(self) -> None:
        """Implement the setup."""
        self.context.logger.info("Setting up Pythoraabciapp FSM behaviour.")


    def teardown(self) -> None:
        """Implement the teardown."""
        self.context.logger.info("Tearing down Pythoraabciapp FSM behaviour.")

    def act(self) -> None:
        """Implement the act."""
        super().act()
        if self.current is None:
            self.context.logger.info("No state to act on.")
            self.terminate()

    def terminate(self) -> None:
        """Implement the termination."""
        print("Terminating the agent.")
        os._exit(0)