// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import {IEntropyConsumer} from "@pythnetwork/entropy-sdk-solidity/IEntropyConsumer.sol";
import {IEntropy} from "@pythnetwork/entropy-sdk-solidity/IEntropy.sol";

contract PythoraEntropy is IEntropyConsumer {
    IEntropy entropy;

    mapping(bytes32 => uint64) public sequenceNumbersByUserRandomNumber;
    mapping(uint64 => bytes32) public randomNumbersBySequenceNumber;

    uint64 public lastSequenceNumber;

    // Event emitted when a random number is requested.
    event RandomNumberRequested(uint64 sequenceNumber, address provider, bytes32 userRandomNumber);
    // Event emitted when a random number is received.
    event PythoraEntropyCallback(uint64 sequenceNumber, address provider, bytes32 randomNumber);

    // @param entropyAddress The address of the entropy contract.
    constructor(address entropyAddress) {
        entropy = IEntropy(entropyAddress);
    }

    // @param userRandomNumber The random number generated by the user.
    function requestRandomNumber(bytes32 userRandomNumber) external payable {
        // Get the default provider and the fee for the request
        address entropyProvider = entropy.getDefaultProvider();
        uint256 fee = entropy.getFee(entropyProvider);

        // Request the random number with the callback
        uint64 sequenceNumber = entropy.requestWithCallback{value: fee}(entropyProvider, userRandomNumber);
        // Store the sequence number to identify the callback request
        lastSequenceNumber = sequenceNumber;
        sequenceNumbersByUserRandomNumber[userRandomNumber] = sequenceNumber;

        emit RandomNumberRequested(sequenceNumber, entropyProvider, userRandomNumber);
    }

    // @param sequenceNumber The sequence number of the request.
    // @param provider The address of the provider that generated the random number. If your app uses multiple providers, you can use this argument to distinguish which one is calling the app back.
    // @param randomNumber The generated random number.
    // This method is called by the entropy contract when a random number is generated.
    // This method **must** be implemented on the same contract that requested the random number.
    // This method should **never** return an error -- if it returns an error, then the keeper will not be able to invoke the callback.
    // If you are having problems receiving the callback, the most likely cause is that the callback is erroring.
    // See the callback debugging guide here to identify the error https://docs.pyth.network/entropy/debug-callback-failures
    function entropyCallback(uint64 sequenceNumber, address provider, bytes32 randomNumber) internal override {
        // Store the random number by sequence number
        randomNumbersBySequenceNumber[sequenceNumber] = randomNumber;

        emit PythoraEntropyCallback(sequenceNumber, provider, randomNumber);
    }

    // This method is required by the IEntropyConsumer interface.
    // It returns the address of the entropy contract which will call the callback.
    function getEntropy() internal view override returns (address) {
        return address(entropy);
    }
}
